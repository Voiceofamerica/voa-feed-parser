service: voa-feedparser

plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager
  - serverless-plugin-bind-deployment-id
  - serverless-offline

custom:
  customDomain:
    domainName: ${self:provider.stage}.voamobileendpoints.com
    basePath: feed
    stage: ${self:provider.stage}

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: voa
  environment: ${file(./env.yml):${self:provider.stage}}
  timeout: 30

functions:
  articles:
    handler: handler.articles
    events:
      - http:
          path: articles
          method: get
          cors: true
  zones:
    handler: handler.zones
    events:
      - http:
          path: zones
          method: get
          cors: true
  search:
    handler: handler.search
    events:
      - http:
          path: search
          method: get
          cors: true
  breakingnews:
    handler: handler.breakingNews
    events:
      - http:
          path: breakingnews
          method: get
          cors: true
  topstories:
    handler: handler.topStories
    events:
      - http:
          path: topstories
          method: get
          cors: true
  scheduler:
    handler: handler.scheduler
    events:
      - http:
          path: scheduler
          method: get
          cors: true
  videoscheduler:
    handler: handler.videoScheduler
    events:
      - http:
          path: videoscheduler
          method: get
          cors: true
  liveaudio:
    handler: handler.liveAudio
    events:
      - http:
          path: liveaudio
          method: get
          cors: true
  livevideo:
    handler: handler.liveVideo
    events:
      - http:
          path: livevideo
          method: get
          cors: true
  audioclips:
    handler: handler.audioClips
    events:
      - http:
          path: audioclips
          method: get
          cors: true

resources:
  Resources:
    ApiGatewayStage:
      Type: 'AWS::ApiGateway::Stage'
      Properties:
        DeploymentId:
          Ref: __deployment__
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${self:provider.stage}
        CacheClusterEnabled: true
        CacheClusterSize: "0.5"
    # ApiGatewayDeployment:
    #   Type: ' AWS::ApiGateway::Deployment'
    #   CacheTtlInSeconds: "900"
    # ApiGatewayMethodArticlesGet:
    #   Type: 'AWS::ApiGateway::Method'
    #   Properties:
    #     RequestParameters:
    #       method.request.path.shortUrl: true
    #     ResourceId:
    #       Ref: ApiGatewayResourceArticles
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     Integration:
    #       RequestParameters:
    #         integration.request.path.shortUrl: method.request.path.shortUrl
    #       CacheNamespace: ApiGatewayMethodArticlesGetCacheNS
    #       CacheKeyParameters:
    #         - method.request.path.shortUrl